// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubTransaction sub transaction
//
// swagger:model SubTransaction
type SubTransaction struct {

	// The subtransaction amount in milliunits format
	// Required: true
	Amount *int64 `json:"amount"`

	// category id
	// Format: uuid
	CategoryID strfmt.UUID `json:"category_id,omitempty"`

	// category name
	CategoryName string `json:"category_name,omitempty"`

	// Whether or not the subtransaction has been deleted.  Deleted subtransactions will only be included in delta requests.
	// Required: true
	Deleted *bool `json:"deleted"`

	// id
	// Required: true
	ID *string `json:"id"`

	// memo
	Memo string `json:"memo,omitempty"`

	// payee id
	// Format: uuid
	PayeeID strfmt.UUID `json:"payee_id,omitempty"`

	// payee name
	PayeeName string `json:"payee_name,omitempty"`

	// transaction id
	// Required: true
	TransactionID *string `json:"transaction_id"`

	// If a transfer, the account_id which the subtransaction transfers to
	// Format: uuid
	TransferAccountID strfmt.UUID `json:"transfer_account_id,omitempty"`

	// If a transfer, the id of transaction on the other side of the transfer
	TransferTransactionID string `json:"transfer_transaction_id,omitempty"`
}

// Validate validates this sub transaction
func (m *SubTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayeeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferAccountID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubTransaction) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *SubTransaction) validateCategoryID(formats strfmt.Registry) error {
	if swag.IsZero(m.CategoryID) { // not required
		return nil
	}

	if err := validate.FormatOf("category_id", "body", "uuid", m.CategoryID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubTransaction) validateDeleted(formats strfmt.Registry) error {

	if err := validate.Required("deleted", "body", m.Deleted); err != nil {
		return err
	}

	return nil
}

func (m *SubTransaction) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SubTransaction) validatePayeeID(formats strfmt.Registry) error {
	if swag.IsZero(m.PayeeID) { // not required
		return nil
	}

	if err := validate.FormatOf("payee_id", "body", "uuid", m.PayeeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubTransaction) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("transaction_id", "body", m.TransactionID); err != nil {
		return err
	}

	return nil
}

func (m *SubTransaction) validateTransferAccountID(formats strfmt.Registry) error {
	if swag.IsZero(m.TransferAccountID) { // not required
		return nil
	}

	if err := validate.FormatOf("transfer_account_id", "body", "uuid", m.TransferAccountID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sub transaction based on context it is used
func (m *SubTransaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SubTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubTransaction) UnmarshalBinary(b []byte) error {
	var res SubTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
