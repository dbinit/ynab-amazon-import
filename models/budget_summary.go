// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BudgetSummary budget summary
//
// swagger:model BudgetSummary
type BudgetSummary struct {

	// The budget accounts (only included if `include_accounts=true` specified as query parameter)
	Accounts []*Account `json:"accounts"`

	// currency format
	CurrencyFormat *CurrencyFormat `json:"currency_format,omitempty"`

	// date format
	DateFormat *DateFormat `json:"date_format,omitempty"`

	// The earliest budget month
	// Format: date
	FirstMonth strfmt.Date `json:"first_month,omitempty"`

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// The last time any changes were made to the budget from either a web or mobile client
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"last_modified_on,omitempty"`

	// The latest budget month
	// Format: date
	LastMonth strfmt.Date `json:"last_month,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this budget summary
func (m *BudgetSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrencyFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BudgetSummary) validateAccounts(formats strfmt.Registry) error {
	if swag.IsZero(m.Accounts) { // not required
		return nil
	}

	for i := 0; i < len(m.Accounts); i++ {
		if swag.IsZero(m.Accounts[i]) { // not required
			continue
		}

		if m.Accounts[i] != nil {
			if err := m.Accounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BudgetSummary) validateCurrencyFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrencyFormat) { // not required
		return nil
	}

	if m.CurrencyFormat != nil {
		if err := m.CurrencyFormat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency_format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currency_format")
			}
			return err
		}
	}

	return nil
}

func (m *BudgetSummary) validateDateFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.DateFormat) { // not required
		return nil
	}

	if m.DateFormat != nil {
		if err := m.DateFormat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("date_format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("date_format")
			}
			return err
		}
	}

	return nil
}

func (m *BudgetSummary) validateFirstMonth(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstMonth) { // not required
		return nil
	}

	if err := validate.FormatOf("first_month", "body", "date", m.FirstMonth.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BudgetSummary) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BudgetSummary) validateLastModifiedOn(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified_on", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BudgetSummary) validateLastMonth(formats strfmt.Registry) error {
	if swag.IsZero(m.LastMonth) { // not required
		return nil
	}

	if err := validate.FormatOf("last_month", "body", "date", m.LastMonth.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BudgetSummary) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this budget summary based on the context it is used
func (m *BudgetSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrencyFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BudgetSummary) contextValidateAccounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Accounts); i++ {

		if m.Accounts[i] != nil {
			if err := m.Accounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BudgetSummary) contextValidateCurrencyFormat(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrencyFormat != nil {
		if err := m.CurrencyFormat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency_format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currency_format")
			}
			return err
		}
	}

	return nil
}

func (m *BudgetSummary) contextValidateDateFormat(ctx context.Context, formats strfmt.Registry) error {

	if m.DateFormat != nil {
		if err := m.DateFormat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("date_format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("date_format")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BudgetSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BudgetSummary) UnmarshalBinary(b []byte) error {
	var res BudgetSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
