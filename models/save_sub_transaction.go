// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SaveSubTransaction save sub transaction
//
// swagger:model SaveSubTransaction
type SaveSubTransaction struct {

	// The subtransaction amount in milliunits format.
	// Required: true
	Amount *int64 `json:"amount"`

	// The category for the subtransaction.  Credit Card Payment categories are not permitted and will be ignored if supplied.
	// Format: uuid
	CategoryID strfmt.UUID `json:"category_id,omitempty"`

	// memo
	// Max Length: 200
	Memo string `json:"memo,omitempty"`

	// The payee for the subtransaction.
	// Format: uuid
	PayeeID strfmt.UUID `json:"payee_id,omitempty"`

	// The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if import_id is also specified on parent transaction) or (2) a payee with the same name or (3) creation of a new payee.
	// Max Length: 50
	PayeeName string `json:"payee_name,omitempty"`
}

// Validate validates this save sub transaction
func (m *SaveSubTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayeeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayeeName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SaveSubTransaction) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *SaveSubTransaction) validateCategoryID(formats strfmt.Registry) error {
	if swag.IsZero(m.CategoryID) { // not required
		return nil
	}

	if err := validate.FormatOf("category_id", "body", "uuid", m.CategoryID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SaveSubTransaction) validateMemo(formats strfmt.Registry) error {
	if swag.IsZero(m.Memo) { // not required
		return nil
	}

	if err := validate.MaxLength("memo", "body", m.Memo, 200); err != nil {
		return err
	}

	return nil
}

func (m *SaveSubTransaction) validatePayeeID(formats strfmt.Registry) error {
	if swag.IsZero(m.PayeeID) { // not required
		return nil
	}

	if err := validate.FormatOf("payee_id", "body", "uuid", m.PayeeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SaveSubTransaction) validatePayeeName(formats strfmt.Registry) error {
	if swag.IsZero(m.PayeeName) { // not required
		return nil
	}

	if err := validate.MaxLength("payee_name", "body", m.PayeeName, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this save sub transaction based on context it is used
func (m *SaveSubTransaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SaveSubTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SaveSubTransaction) UnmarshalBinary(b []byte) error {
	var res SaveSubTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
