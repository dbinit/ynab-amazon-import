// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CurrencyFormat The currency format setting for the budget.  In some cases the format will not be available and will be specified as null.
//
// swagger:model CurrencyFormat
type CurrencyFormat struct {

	// currency symbol
	// Required: true
	CurrencySymbol *string `json:"currency_symbol"`

	// decimal digits
	// Required: true
	DecimalDigits *int32 `json:"decimal_digits"`

	// decimal separator
	// Required: true
	DecimalSeparator *string `json:"decimal_separator"`

	// display symbol
	// Required: true
	DisplaySymbol *bool `json:"display_symbol"`

	// example format
	// Required: true
	ExampleFormat *string `json:"example_format"`

	// group separator
	// Required: true
	GroupSeparator *string `json:"group_separator"`

	// iso code
	// Required: true
	IsoCode *string `json:"iso_code"`

	// symbol first
	// Required: true
	SymbolFirst *bool `json:"symbol_first"`
}

// Validate validates this currency format
func (m *CurrencyFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrencySymbol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDecimalDigits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDecimalSeparator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplaySymbol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExampleFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupSeparator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsoCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSymbolFirst(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CurrencyFormat) validateCurrencySymbol(formats strfmt.Registry) error {

	if err := validate.Required("currency_symbol", "body", m.CurrencySymbol); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyFormat) validateDecimalDigits(formats strfmt.Registry) error {

	if err := validate.Required("decimal_digits", "body", m.DecimalDigits); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyFormat) validateDecimalSeparator(formats strfmt.Registry) error {

	if err := validate.Required("decimal_separator", "body", m.DecimalSeparator); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyFormat) validateDisplaySymbol(formats strfmt.Registry) error {

	if err := validate.Required("display_symbol", "body", m.DisplaySymbol); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyFormat) validateExampleFormat(formats strfmt.Registry) error {

	if err := validate.Required("example_format", "body", m.ExampleFormat); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyFormat) validateGroupSeparator(formats strfmt.Registry) error {

	if err := validate.Required("group_separator", "body", m.GroupSeparator); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyFormat) validateIsoCode(formats strfmt.Registry) error {

	if err := validate.Required("iso_code", "body", m.IsoCode); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyFormat) validateSymbolFirst(formats strfmt.Registry) error {

	if err := validate.Required("symbol_first", "body", m.SymbolFirst); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this currency format based on context it is used
func (m *CurrencyFormat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CurrencyFormat) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrencyFormat) UnmarshalBinary(b []byte) error {
	var res CurrencyFormat
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
