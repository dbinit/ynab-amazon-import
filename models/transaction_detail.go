// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionDetail transaction detail
//
// swagger:model TransactionDetail
type TransactionDetail struct {
	TransactionSummary

	// account name
	// Required: true
	AccountName *string `json:"account_name"`

	// category name
	CategoryName string `json:"category_name,omitempty"`

	// payee name
	PayeeName string `json:"payee_name,omitempty"`

	// If a split transaction, the subtransactions.
	// Required: true
	Subtransactions []*SubTransaction `json:"subtransactions"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TransactionDetail) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TransactionSummary
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TransactionSummary = aO0

	// AO1
	var dataAO1 struct {
		AccountName *string `json:"account_name"`

		CategoryName string `json:"category_name,omitempty"`

		PayeeName string `json:"payee_name,omitempty"`

		Subtransactions []*SubTransaction `json:"subtransactions"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AccountName = dataAO1.AccountName

	m.CategoryName = dataAO1.CategoryName

	m.PayeeName = dataAO1.PayeeName

	m.Subtransactions = dataAO1.Subtransactions

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TransactionDetail) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.TransactionSummary)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AccountName *string `json:"account_name"`

		CategoryName string `json:"category_name,omitempty"`

		PayeeName string `json:"payee_name,omitempty"`

		Subtransactions []*SubTransaction `json:"subtransactions"`
	}

	dataAO1.AccountName = m.AccountName

	dataAO1.CategoryName = m.CategoryName

	dataAO1.PayeeName = m.PayeeName

	dataAO1.Subtransactions = m.Subtransactions

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this transaction detail
func (m *TransactionDetail) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TransactionSummary
	if err := m.TransactionSummary.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubtransactions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionDetail) validateAccountName(formats strfmt.Registry) error {

	if err := validate.Required("account_name", "body", m.AccountName); err != nil {
		return err
	}

	return nil
}

func (m *TransactionDetail) validateSubtransactions(formats strfmt.Registry) error {

	if err := validate.Required("subtransactions", "body", m.Subtransactions); err != nil {
		return err
	}

	for i := 0; i < len(m.Subtransactions); i++ {
		if swag.IsZero(m.Subtransactions[i]) { // not required
			continue
		}

		if m.Subtransactions[i] != nil {
			if err := m.Subtransactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subtransactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subtransactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this transaction detail based on the context it is used
func (m *TransactionDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TransactionSummary
	if err := m.TransactionSummary.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubtransactions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionDetail) contextValidateSubtransactions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Subtransactions); i++ {

		if m.Subtransactions[i] != nil {
			if err := m.Subtransactions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subtransactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subtransactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionDetail) UnmarshalBinary(b []byte) error {
	var res TransactionDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
