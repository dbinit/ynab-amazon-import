// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SaveTransaction save transaction
//
// swagger:model SaveTransaction
type SaveTransaction struct {

	// account id
	// Required: true
	// Format: uuid
	AccountID *strfmt.UUID `json:"account_id"`

	// The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
	// Required: true
	Amount *int64 `json:"amount"`

	// The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
	// Required: true
	// Format: date
	Date *strfmt.Date `json:"date"`

	SaveTransactionWithOptionalFields
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SaveTransaction) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		AccountID *strfmt.UUID `json:"account_id"`

		Amount *int64 `json:"amount"`

		Date *strfmt.Date `json:"date"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.AccountID = dataAO0.AccountID

	m.Amount = dataAO0.Amount

	m.Date = dataAO0.Date

	// AO1
	var aO1 SaveTransactionWithOptionalFields
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.SaveTransactionWithOptionalFields = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SaveTransaction) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		AccountID *strfmt.UUID `json:"account_id"`

		Amount *int64 `json:"amount"`

		Date *strfmt.Date `json:"date"`
	}

	dataAO0.AccountID = m.AccountID

	dataAO0.Amount = m.Amount

	dataAO0.Date = m.Date

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(m.SaveTransactionWithOptionalFields)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this save transaction
func (m *SaveTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with SaveTransactionWithOptionalFields
	if err := m.SaveTransactionWithOptionalFields.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SaveTransaction) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	if err := validate.FormatOf("account_id", "body", "uuid", m.AccountID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SaveTransaction) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *SaveTransaction) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this save transaction based on the context it is used
func (m *SaveTransaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SaveTransactionWithOptionalFields
	if err := m.SaveTransactionWithOptionalFields.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SaveTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SaveTransaction) UnmarshalBinary(b []byte) error {
	var res SaveTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
