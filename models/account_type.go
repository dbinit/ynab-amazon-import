// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AccountType The type of account
//
// swagger:model AccountType
type AccountType string

func NewAccountType(value AccountType) *AccountType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AccountType.
func (m AccountType) Pointer() *AccountType {
	return &m
}

const (

	// AccountTypeChecking captures enum value "checking"
	AccountTypeChecking AccountType = "checking"

	// AccountTypeSavings captures enum value "savings"
	AccountTypeSavings AccountType = "savings"

	// AccountTypeCash captures enum value "cash"
	AccountTypeCash AccountType = "cash"

	// AccountTypeCreditCard captures enum value "creditCard"
	AccountTypeCreditCard AccountType = "creditCard"

	// AccountTypeLineOfCredit captures enum value "lineOfCredit"
	AccountTypeLineOfCredit AccountType = "lineOfCredit"

	// AccountTypeOtherAsset captures enum value "otherAsset"
	AccountTypeOtherAsset AccountType = "otherAsset"

	// AccountTypeOtherLiability captures enum value "otherLiability"
	AccountTypeOtherLiability AccountType = "otherLiability"

	// AccountTypeMortgage captures enum value "mortgage"
	AccountTypeMortgage AccountType = "mortgage"

	// AccountTypeAutoLoan captures enum value "autoLoan"
	AccountTypeAutoLoan AccountType = "autoLoan"

	// AccountTypeStudentLoan captures enum value "studentLoan"
	AccountTypeStudentLoan AccountType = "studentLoan"

	// AccountTypePersonalLoan captures enum value "personalLoan"
	AccountTypePersonalLoan AccountType = "personalLoan"

	// AccountTypeMedicalDebt captures enum value "medicalDebt"
	AccountTypeMedicalDebt AccountType = "medicalDebt"

	// AccountTypeOtherDebt captures enum value "otherDebt"
	AccountTypeOtherDebt AccountType = "otherDebt"
)

// for schema
var accountTypeEnum []interface{}

func init() {
	var res []AccountType
	if err := json.Unmarshal([]byte(`["checking","savings","cash","creditCard","lineOfCredit","otherAsset","otherLiability","mortgage","autoLoan","studentLoan","personalLoan","medicalDebt","otherDebt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountTypeEnum = append(accountTypeEnum, v)
	}
}

func (m AccountType) validateAccountTypeEnum(path, location string, value AccountType) error {
	if err := validate.EnumCase(path, location, value, accountTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this account type
func (m AccountType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAccountTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this account type based on context it is used
func (m AccountType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
