// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SaveTransactionWithOptionalFields save transaction with optional fields
//
// swagger:model SaveTransactionWithOptionalFields
type SaveTransactionWithOptionalFields struct {

	// Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
	Approved bool `json:"approved,omitempty"`

	// The category for the transaction.  To configure a split transaction, you can specify null for `category_id` and provide a `subtransactions` array as part of the transaction object.  If an existing transaction is a split, the `category_id` cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
	// Format: uuid
	CategoryID strfmt.UUID `json:"category_id,omitempty"`

	// The cleared status of the transaction
	// Enum: [cleared uncleared reconciled]
	Cleared string `json:"cleared,omitempty"`

	// The transaction flag
	// Enum: [red orange yellow green blue purple]
	FlagColor *string `json:"flag_color,omitempty"`

	// If specified, the new transaction will be assigned this `import_id` and considered "imported".  We will also attempt to match this imported transaction to an existing "user-entered" transation on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.<br><br>Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.<br><br>If import_id is omitted or specified as null, the transaction will be treated as a "user-entered" transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).
	// Max Length: 36
	ImportID string `json:"import_id,omitempty"`

	// memo
	// Max Length: 200
	Memo string `json:"memo,omitempty"`

	// The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `tranfer_payee_id` on the account resource.
	// Format: uuid
	PayeeID strfmt.UUID `json:"payee_id,omitempty"`

	// The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if `import_id` is also specified) or (2) a payee with the same name or (3) creation of a new payee.
	// Max Length: 50
	PayeeName string `json:"payee_name,omitempty"`

	// An array of subtransactions to configure a transaction as a split.  Updating `subtransactions` on an existing split transaction is not supported.
	Subtransactions []*SaveSubTransaction `json:"subtransactions"`
}

// Validate validates this save transaction with optional fields
func (m *SaveTransactionWithOptionalFields) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCleared(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlagColor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayeeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayeeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubtransactions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SaveTransactionWithOptionalFields) validateCategoryID(formats strfmt.Registry) error {
	if swag.IsZero(m.CategoryID) { // not required
		return nil
	}

	if err := validate.FormatOf("category_id", "body", "uuid", m.CategoryID.String(), formats); err != nil {
		return err
	}

	return nil
}

var saveTransactionWithOptionalFieldsTypeClearedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cleared","uncleared","reconciled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		saveTransactionWithOptionalFieldsTypeClearedPropEnum = append(saveTransactionWithOptionalFieldsTypeClearedPropEnum, v)
	}
}

const (

	// SaveTransactionWithOptionalFieldsClearedCleared captures enum value "cleared"
	SaveTransactionWithOptionalFieldsClearedCleared string = "cleared"

	// SaveTransactionWithOptionalFieldsClearedUncleared captures enum value "uncleared"
	SaveTransactionWithOptionalFieldsClearedUncleared string = "uncleared"

	// SaveTransactionWithOptionalFieldsClearedReconciled captures enum value "reconciled"
	SaveTransactionWithOptionalFieldsClearedReconciled string = "reconciled"
)

// prop value enum
func (m *SaveTransactionWithOptionalFields) validateClearedEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, saveTransactionWithOptionalFieldsTypeClearedPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SaveTransactionWithOptionalFields) validateCleared(formats strfmt.Registry) error {
	if swag.IsZero(m.Cleared) { // not required
		return nil
	}

	// value enum
	if err := m.validateClearedEnum("cleared", "body", m.Cleared); err != nil {
		return err
	}

	return nil
}

var saveTransactionWithOptionalFieldsTypeFlagColorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["red","orange","yellow","green","blue","purple"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		saveTransactionWithOptionalFieldsTypeFlagColorPropEnum = append(saveTransactionWithOptionalFieldsTypeFlagColorPropEnum, v)
	}
}

const (

	// SaveTransactionWithOptionalFieldsFlagColorRed captures enum value "red"
	SaveTransactionWithOptionalFieldsFlagColorRed string = "red"

	// SaveTransactionWithOptionalFieldsFlagColorOrange captures enum value "orange"
	SaveTransactionWithOptionalFieldsFlagColorOrange string = "orange"

	// SaveTransactionWithOptionalFieldsFlagColorYellow captures enum value "yellow"
	SaveTransactionWithOptionalFieldsFlagColorYellow string = "yellow"

	// SaveTransactionWithOptionalFieldsFlagColorGreen captures enum value "green"
	SaveTransactionWithOptionalFieldsFlagColorGreen string = "green"

	// SaveTransactionWithOptionalFieldsFlagColorBlue captures enum value "blue"
	SaveTransactionWithOptionalFieldsFlagColorBlue string = "blue"

	// SaveTransactionWithOptionalFieldsFlagColorPurple captures enum value "purple"
	SaveTransactionWithOptionalFieldsFlagColorPurple string = "purple"
)

// prop value enum
func (m *SaveTransactionWithOptionalFields) validateFlagColorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, saveTransactionWithOptionalFieldsTypeFlagColorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SaveTransactionWithOptionalFields) validateFlagColor(formats strfmt.Registry) error {
	if swag.IsZero(m.FlagColor) { // not required
		return nil
	}

	// value enum
	if err := m.validateFlagColorEnum("flag_color", "body", *m.FlagColor); err != nil {
		return err
	}

	return nil
}

func (m *SaveTransactionWithOptionalFields) validateImportID(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportID) { // not required
		return nil
	}

	if err := validate.MaxLength("import_id", "body", m.ImportID, 36); err != nil {
		return err
	}

	return nil
}

func (m *SaveTransactionWithOptionalFields) validateMemo(formats strfmt.Registry) error {
	if swag.IsZero(m.Memo) { // not required
		return nil
	}

	if err := validate.MaxLength("memo", "body", m.Memo, 200); err != nil {
		return err
	}

	return nil
}

func (m *SaveTransactionWithOptionalFields) validatePayeeID(formats strfmt.Registry) error {
	if swag.IsZero(m.PayeeID) { // not required
		return nil
	}

	if err := validate.FormatOf("payee_id", "body", "uuid", m.PayeeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SaveTransactionWithOptionalFields) validatePayeeName(formats strfmt.Registry) error {
	if swag.IsZero(m.PayeeName) { // not required
		return nil
	}

	if err := validate.MaxLength("payee_name", "body", m.PayeeName, 50); err != nil {
		return err
	}

	return nil
}

func (m *SaveTransactionWithOptionalFields) validateSubtransactions(formats strfmt.Registry) error {
	if swag.IsZero(m.Subtransactions) { // not required
		return nil
	}

	for i := 0; i < len(m.Subtransactions); i++ {
		if swag.IsZero(m.Subtransactions[i]) { // not required
			continue
		}

		if m.Subtransactions[i] != nil {
			if err := m.Subtransactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subtransactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subtransactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this save transaction with optional fields based on the context it is used
func (m *SaveTransactionWithOptionalFields) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSubtransactions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SaveTransactionWithOptionalFields) contextValidateSubtransactions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Subtransactions); i++ {

		if m.Subtransactions[i] != nil {
			if err := m.Subtransactions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subtransactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subtransactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SaveTransactionWithOptionalFields) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SaveTransactionWithOptionalFields) UnmarshalBinary(b []byte) error {
	var res SaveTransactionWithOptionalFields
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
