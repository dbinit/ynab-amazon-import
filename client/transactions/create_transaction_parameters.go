// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/dbinit/ynab-amazon-import/models"
)

// NewCreateTransactionParams creates a new CreateTransactionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateTransactionParams() *CreateTransactionParams {
	return &CreateTransactionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateTransactionParamsWithTimeout creates a new CreateTransactionParams object
// with the ability to set a timeout on a request.
func NewCreateTransactionParamsWithTimeout(timeout time.Duration) *CreateTransactionParams {
	return &CreateTransactionParams{
		timeout: timeout,
	}
}

// NewCreateTransactionParamsWithContext creates a new CreateTransactionParams object
// with the ability to set a context for a request.
func NewCreateTransactionParamsWithContext(ctx context.Context) *CreateTransactionParams {
	return &CreateTransactionParams{
		Context: ctx,
	}
}

// NewCreateTransactionParamsWithHTTPClient creates a new CreateTransactionParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateTransactionParamsWithHTTPClient(client *http.Client) *CreateTransactionParams {
	return &CreateTransactionParams{
		HTTPClient: client,
	}
}

/*
CreateTransactionParams contains all the parameters to send to the API endpoint

	for the create transaction operation.

	Typically these are written to a http.Request.
*/
type CreateTransactionParams struct {

	/* BudgetID.

	   The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
	*/
	BudgetID string

	/* Data.

	   The transaction or transactions to create.  To create a single transaction you can specify a value for the `transaction` object and to create multiple transactions you can specify an array of `transactions`.  It is expected that you will only provide a value for one of these objects.
	*/
	Data *models.PostTransactionsWrapper

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create transaction params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateTransactionParams) WithDefaults() *CreateTransactionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create transaction params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateTransactionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create transaction params
func (o *CreateTransactionParams) WithTimeout(timeout time.Duration) *CreateTransactionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create transaction params
func (o *CreateTransactionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create transaction params
func (o *CreateTransactionParams) WithContext(ctx context.Context) *CreateTransactionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create transaction params
func (o *CreateTransactionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create transaction params
func (o *CreateTransactionParams) WithHTTPClient(client *http.Client) *CreateTransactionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create transaction params
func (o *CreateTransactionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBudgetID adds the budgetID to the create transaction params
func (o *CreateTransactionParams) WithBudgetID(budgetID string) *CreateTransactionParams {
	o.SetBudgetID(budgetID)
	return o
}

// SetBudgetID adds the budgetId to the create transaction params
func (o *CreateTransactionParams) SetBudgetID(budgetID string) {
	o.BudgetID = budgetID
}

// WithData adds the data to the create transaction params
func (o *CreateTransactionParams) WithData(data *models.PostTransactionsWrapper) *CreateTransactionParams {
	o.SetData(data)
	return o
}

// SetData adds the data to the create transaction params
func (o *CreateTransactionParams) SetData(data *models.PostTransactionsWrapper) {
	o.Data = data
}

// WriteToRequest writes these params to a swagger request
func (o *CreateTransactionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param budget_id
	if err := r.SetPathParam("budget_id", o.BudgetID); err != nil {
		return err
	}
	if o.Data != nil {
		if err := r.SetBodyParam(o.Data); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
