// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dbinit/ynab-amazon-import/models"
)

// CreateTransactionReader is a Reader for the CreateTransaction structure.
type CreateTransactionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateTransactionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateTransactionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateTransactionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateTransactionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateTransactionCreated creates a CreateTransactionCreated with default headers values
func NewCreateTransactionCreated() *CreateTransactionCreated {
	return &CreateTransactionCreated{}
}

/*
CreateTransactionCreated describes a response with status code 201, with default header values.

The transaction or transactions were successfully created
*/
type CreateTransactionCreated struct {
	Payload *models.SaveTransactionsResponse
}

// IsSuccess returns true when this create transaction created response has a 2xx status code
func (o *CreateTransactionCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create transaction created response has a 3xx status code
func (o *CreateTransactionCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create transaction created response has a 4xx status code
func (o *CreateTransactionCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create transaction created response has a 5xx status code
func (o *CreateTransactionCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create transaction created response a status code equal to that given
func (o *CreateTransactionCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create transaction created response
func (o *CreateTransactionCreated) Code() int {
	return 201
}

func (o *CreateTransactionCreated) Error() string {
	return fmt.Sprintf("[POST /budgets/{budget_id}/transactions][%d] createTransactionCreated  %+v", 201, o.Payload)
}

func (o *CreateTransactionCreated) String() string {
	return fmt.Sprintf("[POST /budgets/{budget_id}/transactions][%d] createTransactionCreated  %+v", 201, o.Payload)
}

func (o *CreateTransactionCreated) GetPayload() *models.SaveTransactionsResponse {
	return o.Payload
}

func (o *CreateTransactionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SaveTransactionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTransactionBadRequest creates a CreateTransactionBadRequest with default headers values
func NewCreateTransactionBadRequest() *CreateTransactionBadRequest {
	return &CreateTransactionBadRequest{}
}

/*
CreateTransactionBadRequest describes a response with status code 400, with default header values.

The request could not be understood due to malformed syntax or validation error(s).
*/
type CreateTransactionBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this create transaction bad request response has a 2xx status code
func (o *CreateTransactionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create transaction bad request response has a 3xx status code
func (o *CreateTransactionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create transaction bad request response has a 4xx status code
func (o *CreateTransactionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create transaction bad request response has a 5xx status code
func (o *CreateTransactionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create transaction bad request response a status code equal to that given
func (o *CreateTransactionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create transaction bad request response
func (o *CreateTransactionBadRequest) Code() int {
	return 400
}

func (o *CreateTransactionBadRequest) Error() string {
	return fmt.Sprintf("[POST /budgets/{budget_id}/transactions][%d] createTransactionBadRequest  %+v", 400, o.Payload)
}

func (o *CreateTransactionBadRequest) String() string {
	return fmt.Sprintf("[POST /budgets/{budget_id}/transactions][%d] createTransactionBadRequest  %+v", 400, o.Payload)
}

func (o *CreateTransactionBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateTransactionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTransactionConflict creates a CreateTransactionConflict with default headers values
func NewCreateTransactionConflict() *CreateTransactionConflict {
	return &CreateTransactionConflict{}
}

/*
CreateTransactionConflict describes a response with status code 409, with default header values.

A transaction on the same account with the same `import_id` already exists.
*/
type CreateTransactionConflict struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this create transaction conflict response has a 2xx status code
func (o *CreateTransactionConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create transaction conflict response has a 3xx status code
func (o *CreateTransactionConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create transaction conflict response has a 4xx status code
func (o *CreateTransactionConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create transaction conflict response has a 5xx status code
func (o *CreateTransactionConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create transaction conflict response a status code equal to that given
func (o *CreateTransactionConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create transaction conflict response
func (o *CreateTransactionConflict) Code() int {
	return 409
}

func (o *CreateTransactionConflict) Error() string {
	return fmt.Sprintf("[POST /budgets/{budget_id}/transactions][%d] createTransactionConflict  %+v", 409, o.Payload)
}

func (o *CreateTransactionConflict) String() string {
	return fmt.Sprintf("[POST /budgets/{budget_id}/transactions][%d] createTransactionConflict  %+v", 409, o.Payload)
}

func (o *CreateTransactionConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateTransactionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
